Index: src/java/org/dellroad/stuff/vaadin/PropertyDef.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/PropertyDef.java	(revision 370)
+++ src/java/org/dellroad/stuff/vaadin/PropertyDef.java	(working copy)
@@ -32,7 +32,7 @@
  *  ...
  *  int age = def.read(item);
  *  ...
- *  Property prop = this.get(container, itemId);
+ *  Property&lt;Integer&gt; prop = def.get(container, itemId);
  * </pre></blockquote>
  *
  * @param <T> property's value type
@@ -168,9 +168,11 @@
      * Get the property that this instance represents from the given {@link Item}.
      *
      * @return property, or null if not found
+     * @throws ClassCastException if the property found has a different type than this instance
      */
-    public Property get(Item item) {
-        return item.getItemProperty(this.getPropertyId());
+    @SuppressWarnings("unchecked")
+    public Property<T> get(Item item) {
+        return this.cast(item.getItemProperty(this.getPropertyId()));
     }
 
     /**
@@ -179,11 +181,23 @@
      * @param container the container containing the items
      * @param itemId the ID of the item containing the property
      * @return property, or null if not found
+     * @throws ClassCastException if the property found has a different type than this instance
      */
-    public Property get(Container container, Object itemId) {
-        return container.getContainerProperty(itemId, this.getPropertyId());
+    public Property<T> get(Container container, Object itemId) {
+        return this.cast(container.getContainerProperty(itemId, this.getPropertyId()));
     }
 
+    @SuppressWarnings("unchecked")
+    private Property<T> cast(Property<?> property) {
+        if (property == null)
+            return null;
+        if (property.getType() != this.getType()) {
+            throw new ClassCastException("property type " + property.getType().getName()
+              + " != definition type " + this.getType().getName());
+        }
+        return (Property<T>)property;
+    }
+
     /**
      * Add a property represented by this instance to the given {@link Container}.
      *
@@ -203,7 +217,7 @@
      * @return true if the operation succeeded, false if not
      * @throws UnsupportedOperationException if the operation is not supported
      */
-    public boolean addTo(Item item, Property property) {
+    public boolean addTo(Item item, Property<T> property) {
         return item.addItemProperty(this.getPropertyId(), property);
     }
 
Index: src/java/org/dellroad/stuff/vaadin/ContextApplication.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/ContextApplication.java	(revision 368)
+++ src/java/org/dellroad/stuff/vaadin/ContextApplication.java	(working copy)
@@ -10,9 +10,11 @@
 import com.vaadin.Application;
 import com.vaadin.terminal.Terminal;
 import com.vaadin.terminal.gwt.server.HttpServletRequestListener;
-import com.vaadin.ui.Window;
+import com.vaadin.ui.Notification;
+import com.vaadin.ui.Root;
 
 import java.net.SocketException;
+import java.util.Collection;
 import java.util.EventObject;
 import java.util.HashSet;
 import java.util.List;
@@ -40,7 +42,7 @@
  * @since 1.0.134
  */
 @SuppressWarnings("serial")
-public abstract class ContextApplication extends Application implements HttpServletRequestListener {
+public class ContextApplication extends Application implements HttpServletRequestListener {
 
     /**
      * Default notification linger time for error notifications (in milliseconds): Value is {@value}ms.
@@ -87,9 +89,14 @@
     }
 
     /**
-     * Initialize the application. Sub-classes of {@link ContextApplication} must implement this method.
+     * Initialize the application. In Vaain 6, sub-classes of {@link ContextApplication} must
+     * override this method to initialize the application. In Vaadin 7+, overriding is optional.
+     *
+     * <p>
+     * The implementation in {@link ContextApplication} does nothing.
      */
-    protected abstract void initApplication();
+    protected void initApplication() {
+    }
 
 // Error handling
 
@@ -122,15 +129,19 @@
     public void showError(String title, String description) {
 
         // Get window
-        Window window = this.getMainWindow();
-        if (window == null)
-            return;
+        Root root = Root.getCurrentRoot();
+        if (root == null) {
+            Collection<Root> roots = this.getRoots();
+            if (roots.isEmpty())
+                return;
+            root = roots.iterator().next();
+        }
 
         // Show error
-        Window.Notification notification = new Window.Notification(title, description, Window.Notification.TYPE_ERROR_MESSAGE);
+        Notification notification = new Notification(title, description, Notification.TYPE_ERROR_MESSAGE);
         notification.setStyleName("warning");
         notification.setDelayMsec(this.getNotificationDelay());
-        window.showNotification(notification);
+        root.showNotification(notification);
     }
 
     /**
Index: src/java/org/dellroad/stuff/vaadin/SimpleItem.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/SimpleItem.java	(revision 371)
+++ src/java/org/dellroad/stuff/vaadin/SimpleItem.java	(working copy)
@@ -91,7 +91,7 @@
      * @throws UnsupportedOperationException always
      */
     @Override
-    public boolean addItemProperty(Object id, Property property) {      // TODO: VAADIN7
+    public boolean addItemProperty(Object id, Property/*<?>*/ property) {
         throw new UnsupportedOperationException();
     }
 
Index: src/java/org/dellroad/stuff/vaadin/SpringContextApplication.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/SpringContextApplication.java	(revision 368)
+++ src/java/org/dellroad/stuff/vaadin/SpringContextApplication.java	(working copy)
@@ -127,7 +127,7 @@
  * @see <a href="https://github.com/archiecobbs/dellroad-stuff-vaadin-spring-demo3">Example Code on GitHub</a>
  */
 @SuppressWarnings("serial")
-public abstract class SpringContextApplication extends ContextApplication {
+public class SpringContextApplication extends ContextApplication {
 
     private static final AtomicLong UNIQUE_INDEX = new AtomicLong();
 
@@ -168,12 +168,17 @@
     }
 
     /**
-     * Initialize the application. Sub-classes of {@link SpringContextApplication} must implement this method.
+     * Initialize the application. In Vaadin 6, sub-classes of {@link SpringContextApplication} must
+     * override this method to initialize the application. In Vaadin 7+, overriding is optional.
      *
+     * <p>
+     * The implementation in {@link SpringContextApplication} does nothing.
+     *
      * @param context the associated {@link WebApplicationContext} just created and refreshed
      * @see #destroySpringApplication
      */
-    protected abstract void initSpringApplication(ConfigurableWebApplicationContext context);
+    protected void initSpringApplication(ConfigurableWebApplicationContext context) {
+    }
 
     /**
      * Perform any application-specific shutdown work. This will be invoked at shutdown after this Vaadin application and the
Index: src/java/org/dellroad/stuff/vaadin/SimpleContainer.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/SimpleContainer.java	(revision 371)
+++ src/java/org/dellroad/stuff/vaadin/SimpleContainer.java	(working copy)
@@ -118,7 +118,7 @@
     }
 
     @Override
-    public Property getContainerProperty(Object itemId, Object propertyId) {        // TODO: VAADIN7
+    public Property<?> getContainerProperty(Object itemId, Object propertyId) {
         SimpleItem<T> entityItem = this.getItem(itemId);
         if (entityItem == null)
             return null;
Index: src/java/org/dellroad/stuff/vaadin/SimpleProperty.java
===================================================================
--- src/java/org/dellroad/stuff/vaadin/SimpleProperty.java	(revision 371)
+++ src/java/org/dellroad/stuff/vaadin/SimpleProperty.java	(working copy)
@@ -23,7 +23,7 @@
  * @see SimpleItem
  */
 @SuppressWarnings("serial")
-public class SimpleProperty<T, V> extends AbstractProperty {                // TODO: VAADIN7
+public class SimpleProperty<T, V> extends AbstractProperty<V> {
 
     private final T object;
     private final PropertyDef<V> propertyDef;
Index: src/ivy/ivy.xml
===================================================================
--- src/ivy/ivy.xml	(revision 368)
+++ src/ivy/ivy.xml	(working copy)
@@ -15,7 +15,7 @@
     </configurations>
 
     <dependencies>
-        <dependency force="true" org="com.vaadin" name="vaadin" rev="6.7+" conf="build->default"/>
+        <dependency force="true" org="com.vaadin" name="vaadin" rev="7.0.0.alpha2" conf="build->default"/>
         <dependency force="true" org="javax.servlet" name="servletapi" rev="3.0" conf="build->default"/>
         <dependency force="true" org="javax.persistence" name="persistence-api" rev="2.0" conf="build->default"/>
         <dependency force="true" org="javax.validation" name="validation-api" rev="1.0.0.GA" conf="build->default"/>
